<!DOCTYPE html>
<html>
<head>

<meta charset="utf-8">
<title>Hack Day WebGL</title>
<script type="text/javascript" src="javascripts/jquery-1.7.1.min.js"></script>
<script type="text/javascript" src="javascripts/webgl-utils.js"></script>

<script>
$(function(){main();});

function main()//the entrance
{
	var image=new Image();
	image.src="images/farm8.jpg";//pass from Fritz
	image.onload=function()
	{
		render(image);
	}
}

function render(image)
{
	var canvas=document.getElementById("canvas");
	var gl=getWebGLContext(canvas);
	if(!gl){return;}
	vertexShader=createShaderFromScriptElement(gl,"2d-vertex-shader");
	fragmentShader=createShaderFromScriptElement(gl,"2d-fragment-shader");
	program=createProgram(gl,[vertexShader,fragmentShader]);
	gl.useProgram(program);
	var positionLocation=gl.getAttribLocation(program,"a_position");
	var texCoordLocation=gl.getAttribLocation(program,"a_texCoord");
	var texCoordBuffer=gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,texCoordBuffer);
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0,1.0]),gl.STATIC_DRAW);
	gl.enableVertexAttribArray(texCoordLocation);
	gl.vertexAttribPointer(texCoordLocation,2,gl.FLOAT,false,0,0);
	function createAndSetupTexture(gl)
	{
		var texture=gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D,texture);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		return texture;
	}
	var originalImageTexture=createAndSetupTexture(gl);
	gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,image);
	var textures=[];
	var framebuffers=[];
	for(var ii=0;ii<2;++ii)
	{
		var texture=createAndSetupTexture(gl);
		textures.push(texture);
		gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,image.width,image.height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);
		var fbo=gl.createFramebuffer();framebuffers.push(fbo);
		gl.bindFramebuffer(gl.FRAMEBUFFER,fbo);
		gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture,0);
	}
	var resolutionLocation=gl.getUniformLocation(program,"u_resolution");
	var textureSizeLocation=gl.getUniformLocation(program,"u_textureSize");
	var kernelLocation=gl.getUniformLocation(program,"u_kernel[0]");
	var flipYLocation=gl.getUniformLocation(program,"u_flipY");
	gl.uniform2f(textureSizeLocation,image.width,image.height);
	var kernels={restore:[0,0,0,0,1,0,0,0,0],smooth:[0.045,0.122,0.045,0.122,0.332,0.122,0.045,0.122,0.045],sharpen:[-1,-1,-1,-1,16,-1,-1,-1,-1],edgeDetect:[-0.125,-0.125,-0.125,-0.125,1,-0.125,-0.125,-0.125,-0.125]};
	
	var restore=document.getElementById("restore");
	var count1=0;
	restore.onclick=function(event){
	drawWithKernel('restore');
	gl.bindTexture(gl.TEXTURE_2D,textures[count1%2]);
	++count1;
	}

	var smooth=document.getElementById("smooth");
	var count1=0;
	smooth.onclick=function(event){
	drawWithKernel('smooth');
	gl.bindTexture(gl.TEXTURE_2D,textures[count1%2]);
	++count1;
	}

	var sharpen=document.getElementById("sharpen");
	var count1=0;
	sharpen.onclick=function(event){
	drawWithKernel('sharpen');
	gl.bindTexture(gl.TEXTURE_2D,textures[count1%2]);
	++count1;
	}

	var edgeDetect=document.getElementById("edgeDetect");
	var count1=0;
	edgeDetect.onclick=function(event){
	drawWithKernel('edgeDetect');
	gl.bindTexture(gl.TEXTURE_2D,textures[count1%2]);
	++count1;
	}

	var positionBuffer=gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,positionBuffer);
	gl.enableVertexAttribArray(positionLocation);
	gl.vertexAttribPointer(positionLocation,2,gl.FLOAT,false,0,0);
	setRectangle(gl,0,0,image.width,image.height);

	gl.bindTexture(gl.TEXTURE_2D,originalImageTexture);
	gl.uniform1f(flipYLocation,1);
	var count=0;
	setFramebuffer(framebuffers[count%2],image.width,image.height);
	drawWithKernel("restore");
	gl.bindTexture(gl.TEXTURE_2D,textures[count%2]);
	++count;

	gl.uniform1f(flipYLocation,-1);
	setFramebuffer(null,canvas.width,canvas.height);
	drawWithKernel("restore");

	function setFramebuffer(fbo,width,height)
	{
		gl.bindFramebuffer(gl.FRAMEBUFFER,fbo);
		gl.uniform2f(resolutionLocation,width,height);gl.viewport(0,0,width,height);
	}
	function drawWithKernel(name)
	{
		gl.uniform1fv(kernelLocation,kernels[name]);gl.drawArrays(gl.TRIANGLES,0,6);
	}
}

function setRectangle(gl,x,y,width,height)
{
	var x1=x;
	var x2=x+width;
	var y1=y;
	var y2=y+height;
	gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([x1,y1,x2,y1,x1,y2,x1,y2,x2,y1,x2,y2]),gl.STATIC_DRAW);
}
</script>

<script id="2d-vertex-shader" type="x-shader/x-vertex">
attribute vec2 a_position;
attribute vec2 a_texCoord;
uniform vec2 u_resolution;
uniform float u_flipY;
varying vec2 v_texCoord;
void main() 
{
   vec2 zeroToOne = a_position / u_resolution;
   vec2 zeroToTwo = zeroToOne * 2.0;
   vec2 clipSpace = zeroToTwo - 1.0;
   gl_Position = vec4(clipSpace * vec2(1, u_flipY), 0, 1);
   v_texCoord = a_texCoord;
}
</script>

<script id="2d-fragment-shader" type="x-shader/x-fragment">
precision mediump float;
uniform sampler2D u_image;
uniform vec2 u_textureSize;
uniform float u_kernel[9];
varying vec2 v_texCoord;
void main() 
{
   vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;
   vec4 colorSum =
       texture2D(u_image, v_texCoord + onePixel * vec2(-1, -1)) * u_kernel[0] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 0, -1)) * u_kernel[1] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 1, -1)) * u_kernel[2] +
       texture2D(u_image, v_texCoord + onePixel * vec2(-1,  0)) * u_kernel[3] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 0,  0)) * u_kernel[4] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 1,  0)) * u_kernel[5] +
       texture2D(u_image, v_texCoord + onePixel * vec2(-1,  1)) * u_kernel[6] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 0,  1)) * u_kernel[7] +
       texture2D(u_image, v_texCoord + onePixel * vec2( 1,  1)) * u_kernel[8] ;
   float kernelWeight =
       u_kernel[0] +
       u_kernel[1] +
       u_kernel[2] +
       u_kernel[3] +
       u_kernel[4] +
       u_kernel[5] +
       u_kernel[6] +
       u_kernel[7] +
       u_kernel[8] ;

   if (kernelWeight <= 0.0) {
     kernelWeight = 1.0;
   }

   gl_FragColor = vec4((colorSum / kernelWeight).rgb, 1);
}
</script>
</head>

<body>
	<canvas id="canvas" width="1024" height="768"></canvas>
	<br/>
	<button type="Button" id="restore">Restore</button>
	<button type="Button" id="smooth">Smooth</button>
	<button type="Button" id="sharpen">Sharpen</button>
	<button type="Button" id="edgeDetect">Edge Detect</button>
	<button type="Button" id="colorPick">Color Pick</button>
	<button type="Button" id="flipH">Flip Horizontally</button>
	<button type="Button" id="flipV">Flip Vertically</button>
</body>
</html>
